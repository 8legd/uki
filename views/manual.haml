!!!1.1
%html
  %head
    %title UKI manual
  
  %body
    %h2 Basics
    %p 
      Main part of Uki are views. Views are visual components like 
      <a href="http://github.com/voloko/uki/src/uki-view/view/button.js">Button</a> or 
      <a href="http://github.com/voloko/uki/src/uki-view/view/toolbar.js">Toolbar</a>. 
      You can find list of views at <a href="http://github.com/voloko/uki/src/uki-view/view">src/uki-view/view</a>.
      Views are created either directly or through <a href="http://github.com/voloko/uki/src/uki-core/builder.js">uki builder</a>. 
      Once created views can be attached to a dom container.
    %p
      In MVC architecture uki views correspond to view layer.
    
    %h2 Creating views
    %p You can create views directly like:
    %pre
      :preserve
        var button = new uki.view.Button(new uki.geometry.Rect(10, 10, 100, 24));
        button.text('Click me');
        button.anchors('top right');
        button.disabled(true);
    %p or using a builder:
    %pre
      uki({ view: 'Button', rect: '10 10 100 24', text: 'Click me', anchors: 'top right', disabled: true });
     
     
    %h2 Child views
    %p Views can be placed in other views. Directly:
    %pre
      :preserve
        var box = new uki.views.Box(new uki.geometry.Rect(0, 0, 1000, 200));
        box.background(new uki.background.Css('#CCC'));
        box.appendChild(button);
    %p or using shorter builder notation:
    %pre
      uki( { view: 'Box', rect: '1000 200', background: '#CCC', childViews: [button] });
    %p
      You can traverse through child views using <code>childViews()</code> and <code>parent()</code> properties. 
      Views also support dom-like methods: <code>appendChild</code> and <code>removeChild</code>.


    %h2 Layout
    %p 
      Layout specified using initial position (<code>rect</code>) and resize rules (<code>anchors</code>). 
    %ul
      %li 
        <strong><code>rect</code></strong> accepts an instance of <code>uki.geometry.Rect</code> or its 
        string representation. Format of the string is "x y width height" or "width height".
        %pre
          :preserve
            uki({ ... rect: '10 20 100 24' });  // left = 10, top = 20, width = 100, height = 24
            uki({ ... rect: '100 200' }); // top left corner (left = top = 0), width = 100, height = 200
      %li
        <strong><code>anchors</code></strong> may be any combination of "left", "right", "top", "bottom".
        Distance between named anchor and parents side
        will remain constant on resize. Example: 
        %pre
          :preserve
            uki({ ... anchors: 'top right' });         // no resize, move with the top right corner of parent
            uki({ ... anchors: 'bottom left' });       // no resize, move with the bottom left corner of parent
            uki({ ... anchors: 'bottom left right' }); // resize horizontaly, move with the bottom side of parent
      
    %h2 Selectors
    %p 
      You can find views using CSS-like selectors:
    %pre
      :preserve
        uki('Label') // find all labels on page
        uki('uki.view.Label') // find all labels by full name
        uki('#myLabel') // find view with id = myLabel
        uki('Box[name=main] > Label') // find all imidiate descendant Labels in a box with name = "main"
        uki('> Slider', context) // find all direct descendant Sliders within given context
        uki('Slider,Checkbox') // find all Sliders and Checkboxes
        uki('Slider:eq(3)') // find 3-d slider
    
      
    %h2 Collections
    %p 
      Several view objects can be grouped into collection. 
      <a href="http://github.com/voloko/uki/src/uki-core/colleciton.js">Collection</a> lets you run a method on all its views.
      You can create collection through <code>new uki.Collection</code> constructor. Though its rarely needed. 
      All <code>uki(...)</code> calls already return collections. Most collection methods are chainable. 
    %pre
      uki( 'Button' ).disabled(true).parent().find( 'Label' ).css({ color: '#CCC' });
    
    
    %h2 Attachment
    %p 
      Once view is created it can be attached to a dom container. Any block element including <code>&lt;body&gt;</code> 
      can become the container for uki views.
    %p
      To attach a view you should create 
      <code>new uki.<a href="http://github.com/voloko/uki/src/uki-core/attachment.js">Attachment</a></code> object. 
      It can be done directly or with convenience Collection method <code>attachTo()</code>.
    %pre
      uki( ... ).attachTo( document.getElementById('test') );
    